{
  "address": "0x75144E9D1665Fe6e1607B15f48706BA2915333a3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseQuorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minProposalPower",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gsc",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "votingVaults",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "created",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "execution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "votingPower",
              "type": "uint128"
            },
            {
              "internalType": "enum CoreVoting.Ballot",
              "name": "castBallot",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct CoreVoting.Vote",
          "name": "vote",
          "type": "tuple"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAY_IN_BLOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedVaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_extraVoteTime",
          "type": "uint256"
        }
      ],
      "name": "changeExtraVotingTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "changeVaultStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "deauthorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraVoteTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalVotingPower",
      "outputs": [
        {
          "internalType": "uint128[3]",
          "name": "",
          "type": "uint128[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minProposalPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "votingVaults",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extraVaultData",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "lastCall",
          "type": "uint256"
        },
        {
          "internalType": "enum CoreVoting.Ballot",
          "name": "ballot",
          "type": "uint8"
        }
      ],
      "name": "proposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "created",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "unlock",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "expiration",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "quorum",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lastCall",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "quorums",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        }
      ],
      "name": "setCustomQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        }
      ],
      "name": "setDefaultQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "setLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minProposalPower",
          "type": "uint256"
        }
      ],
      "name": "setMinProposalPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "votingVaults",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extraVaultData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "enum CoreVoting.Ballot",
          "name": "ballot",
          "type": "uint8"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "votingPower",
          "type": "uint128"
        },
        {
          "internalType": "enum CoreVoting.Ballot",
          "name": "castBallot",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd22ee0a2ed8d015154ed85cbdbf927831855ee1a9b89c7462d107df03621724e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x75144E9D1665Fe6e1607B15f48706BA2915333a3",
    "transactionIndex": 0,
    "gasUsed": "2062053",
    "logsBloom": "0x
    "blockHash": "0x075f9170af1a23e7f13648a429bd8c37c43f41b6da095ec8f35b45a3cf4e2259",
    "transactionHash": "0xd22ee0a2ed8d015154ed85cbdbf927831855ee1a9b89c7462d107df03621724e",
    "logs": [],
    "blockNumber": 9234568,
    "cumulativeGasUsed": "2062053",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x427d1b73d94BAb4C0D8b2EE244c83c3aEb76bC72",
    10,
    10,
    "0x0000000000000000000000000000000000000000",
    [
      "0xAcC56a61712D6B14CF2aCf363699F971113bdc90"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "b98fa4db99c33c415c022412c7a2a66e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProposalPower\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gsc\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"votingVaults\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"execution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"votingPower\",\"type\":\"uint128\"},{\"internalType\":\"enum CoreVoting.Ballot\",\"name\":\"castBallot\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct CoreVoting.Vote\",\"name\":\"vote\",\"type\":\"tuple\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY_IN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extraVoteTime\",\"type\":\"uint256\"}],\"name\":\"changeExtraVotingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"changeVaultStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraVoteTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotingPower\",\"outputs\":[{\"internalType\":\"uint128[3]\",\"name\":\"\",\"type\":\"uint128[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProposalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"votingVaults\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extraVaultData\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"lastCall\",\"type\":\"uint256\"},{\"internalType\":\"enum CoreVoting.Ballot\",\"name\":\"ballot\",\"type\":\"uint8\"}],\"name\":\"proposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"created\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"quorum\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastCall\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"quorums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"setCustomQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"setDefaultQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minProposalPower\",\"type\":\"uint256\"}],\"name\":\"setMinProposalPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"votingVaults\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extraVaultData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum CoreVoting.Ballot\",\"name\":\"ballot\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"votingPower\",\"type\":\"uint128\"},{\"internalType\":\"enum CoreVoting.Ballot\",\"name\":\"castBallot\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorize(address)\":{\"details\":\"Privileged function authorize an address\",\"params\":{\"who\":\"the address to authorize\"}},\"changeExtraVotingTime(uint256)\":{\"params\":{\"_extraVoteTime\":\"New extra voting time\"}},\"changeVaultStatus(address,bool)\":{\"params\":{\"isValid\":\"True to be valid, false otherwise.\",\"vault\":\"Address of the voting vault.\"}},\"constructor\":{\"params\":{\"_baseQuorum\":\"Default quorum for all functions with no set quorum.\",\"_gsc\":\"governance steering committee contract.\",\"_minProposalPower\":\"Minimum voting power needed to submit a proposal.\",\"_timelock\":\"Timelock contract.\",\"votingVaults\":\"Initial voting vaults to approve.\"}},\"deauthorize(address)\":{\"details\":\"Privileged function to de authorize an address\",\"params\":{\"who\":\"The address to remove authorization from\"}},\"execute(uint256,address[],bytes[])\":{\"params\":{\"calldatas\":\"execution calldata for each target.\",\"proposalId\":\"proposal identifier.\",\"targets\":\"list of target addresses the timelock contract will interact with.\"}},\"getProposalVotingPower(uint256)\":{\"params\":{\"proposalId\":\"The proposal's ID.\"}},\"isAuthorized(address)\":{\"details\":\"Returns true if an address is authorized\",\"params\":{\"who\":\"the address to check\"},\"returns\":{\"_0\":\"true if authorized false if not\"}},\"proposal(address[],bytes[],address[],bytes[],uint256,uint8)\":{\"details\":\"all provided votingVaults must be approved vaults `approvedVaults`.\",\"params\":{\"ballot\":\"vote direction (yes, no, maybe)\",\"calldatas\":\"execution calldata for each target.\",\"extraVaultData\":\"an encoded list of extra data to provide to vaults\",\"lastCall\":\"timestamp after which this cannot be executed, note should be                 more than the voting time period\",\"targets\":\"list of target addresses the timelock contract will interact with.\",\"votingVaults\":\"voting vaults to draw voting power from.\"}},\"quorums(address,bytes4)\":{\"params\":{\"functionSelector\":\"the function which is callable\",\"target\":\"the contract for which the quorum is set\"},\"returns\":{\"_0\":\"The quorum needed to pass the function at this point in time\"}},\"setCustomQuorum(address,bytes4,uint256)\":{\"params\":{\"quorum\":\"Fraction to set quorum to.\",\"selector\":\"Function selector.\",\"target\":\"Target contract address.\"}},\"setDefaultQuorum(uint256)\":{\"params\":{\"quorum\":\"New base quorum.\"}},\"setLockDuration(uint256)\":{\"params\":{\"_lockDuration\":\"New lock duration.\"}},\"setMinProposalPower(uint256)\":{\"params\":{\"_minProposalPower\":\"Minimum voting power needed to submit a proposal.\"}},\"setOwner(address)\":{\"details\":\"Function to change owner\",\"params\":{\"who\":\"The new owner address\"}},\"vote(address[],bytes[],uint256,uint8)\":{\"details\":\"all provided votingVaults must be approved vaults `approvedVaults`. Addresses can re-vote, but the previous vote's effect will be negated.\",\"params\":{\"ballot\":\"vote direction (yes, no, maybe)\",\"extraVaultData\":\"extra bytes data to give to each vault\",\"proposalId\":\"proposal identifier.\",\"votingVaults\":\"voting vaults to draw voting power from.\"},\"returns\":{\"_0\":\"the user's voting power\"}}},\"stateVariables\":{\"approvedVaults\":{\"params\":{\"vault\":\"the address to check if it is an approved vault\"},\"return\":\"true if approved false if not approved\",\"returns\":{\"_0\":\"true if approved false if not approved\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvedVaults(address)\":{\"notice\":\"A method auto generated from a public storage mapping, looks         up which vault addresses are approved by core voting\"},\"changeExtraVotingTime(uint256)\":{\"notice\":\"Updates the extra voting period\"},\"changeVaultStatus(address,bool)\":{\"notice\":\"Updates the status of a voting vault.\"},\"constructor\":{\"notice\":\"constructor\"},\"execute(uint256,address[],bytes[])\":{\"notice\":\"Execute a proposal.\"},\"getProposalVotingPower(uint256)\":{\"notice\":\"gets the current voting power for a proposal\"},\"proposal(address[],bytes[],address[],bytes[],uint256,uint8)\":{\"notice\":\"Create a new proposal\"},\"quorums(address,bytes4)\":{\"notice\":\"Override of the getter for the 'quorums' mapping which returns the default         quorum when the quorum is not set.\"},\"setCustomQuorum(address,bytes4,uint256)\":{\"notice\":\"Sets a quorum for a specific address and selector.\"},\"setDefaultQuorum(uint256)\":{\"notice\":\"Updates the default quorum.\"},\"setLockDuration(uint256)\":{\"notice\":\"Updates the lock duration of a proposal.\"},\"setMinProposalPower(uint256)\":{\"notice\":\"Updates the minimum voting power needed to submit a proposal.\"},\"vote(address[],bytes[],uint256,uint8)\":{\"notice\":\"Votes for a new proposal.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoreVoting.sol\":\"CoreVoting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/CoreVoting.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IVotingVault.sol\\\";\\nimport \\\"./libraries/Authorizable.sol\\\";\\nimport \\\"./libraries/ReentrancyBlock.sol\\\";\\nimport \\\"./interfaces/ICoreVoting.sol\\\";\\n\\ncontract CoreVoting is Authorizable, ReentrancyBlock, ICoreVoting {\\n    // if a function selector does not have a set quorum we use this default quorum\\n    uint256 public baseQuorum;\\n\\n    // Assumes avg block time of 13.3 seconds. May be longer or shorter due\\n    // to ice ages or short term changes in hash power.\\n    uint256 public constant DAY_IN_BLOCKS = 6496;\\n\\n    // minimum time a proposal must be active for before executing\\n    // Default to 3 days, this avoids weekend surprise proposals\\n    uint256 public lockDuration = DAY_IN_BLOCKS * 3;\\n\\n    // The number of blocks after the proposal is unlocked during which\\n    // voting can continue. Max vote time = lockDuration + extraVoteTime\\n    // Default to ~5 days of blocks, ie 8 days max vote time\\n    uint256 public extraVoteTime = DAY_IN_BLOCKS * 5;\\n\\n    // minimum amount of voting power required to submit a proposal\\n    uint256 public minProposalPower;\\n\\n    // number of proposals created\\n    uint256 public proposalCount;\\n\\n    // mapping of address and selector to quorum\\n    mapping(address => mapping(bytes4 => uint256)) private _quorums;\\n\\n    /// @notice Override of the getter for the 'quorums' mapping which returns the default\\n    ///         quorum when the quorum is not set.\\n    /// @param target the contract for which the quorum is set\\n    /// @param functionSelector the function which is callable\\n    /// @return The quorum needed to pass the function at this point in time\\n    function quorums(\\n        address target,\\n        bytes4 functionSelector\\n    ) public view returns (uint256) {\\n        uint256 storedQuorum = _quorums[target][functionSelector];\\n\\n        if (storedQuorum == 0) {\\n            return baseQuorum;\\n        } else {\\n            return storedQuorum;\\n        }\\n    }\\n\\n    // stores approved voting vaults\\n    mapping(address => bool) public override approvedVaults;\\n\\n    // proposal storage with the proposalID as key\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    // mapping of addresses and proposalIDs to vote struct representing\\n    // the voting actions taken for each proposal\\n    mapping(address => mapping(uint256 => Vote)) public votes;\\n\\n    enum Ballot {\\n        YES,\\n        NO,\\n        MAYBE\\n    }\\n\\n    struct Proposal {\\n        // hash of this proposal's intended function calls\\n        bytes32 proposalHash;\\n        // block of the proposal creation\\n        uint128 created;\\n        // timestamp when the proposal can execute\\n        uint128 unlock;\\n        // expiration time of a proposal\\n        uint128 expiration;\\n        // the quorum required for the proposal to execute\\n        uint128 quorum;\\n        // [yes, no, maybe] voting power\\n        uint128[3] votingPower;\\n        // Timestamp after which if the call has not been executed it cannot be executed\\n        uint128 lastCall;\\n    }\\n\\n    struct Vote {\\n        // voting power of the vote\\n        uint128 votingPower;\\n        // direction of the vote\\n        Ballot castBallot;\\n    }\\n\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        uint256 created,\\n        uint256 execution,\\n        uint256 expiration\\n    );\\n\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    event Voted(address indexed voter, uint256 indexed proposalId, Vote vote);\\n\\n    /// @notice constructor\\n    /// @param _timelock Timelock contract.\\n    /// @param _baseQuorum Default quorum for all functions with no set quorum.\\n    /// @param _minProposalPower Minimum voting power needed to submit a proposal.\\n    /// @param _gsc governance steering committee contract.\\n    /// @param votingVaults Initial voting vaults to approve.\\n    constructor(\\n        address _timelock,\\n        uint256 _baseQuorum,\\n        uint256 _minProposalPower,\\n        address _gsc,\\n        address[] memory votingVaults\\n    ) Authorizable() {\\n        baseQuorum = _baseQuorum;\\n        minProposalPower = _minProposalPower;\\n        for (uint256 i = 0; i < votingVaults.length; i++) {\\n            approvedVaults[votingVaults[i]] = true;\\n        }\\n        setOwner(address(_timelock));\\n        _authorize(_gsc);\\n    }\\n\\n    /// @notice Create a new proposal\\n    /// @dev all provided votingVaults must be approved vaults `approvedVaults`.\\n    /// @param votingVaults voting vaults to draw voting power from.\\n    /// @param extraVaultData an encoded list of extra data to provide to vaults\\n    /// @param targets list of target addresses the timelock contract will interact with.\\n    /// @param calldatas execution calldata for each target.\\n    /// @param lastCall timestamp after which this cannot be executed, note should be\\n    ///                 more than the voting time period\\n    /// @param ballot vote direction (yes, no, maybe)\\n    function proposal(\\n        address[] calldata votingVaults,\\n        bytes[] calldata extraVaultData,\\n        address[] calldata targets,\\n        bytes[] calldata calldatas,\\n        uint256 lastCall,\\n        Ballot ballot\\n    ) external {\\n        require(targets.length == calldatas.length, \\\"array length mismatch\\\");\\n        require(targets.length != 0, \\\"empty proposal\\\");\\n\\n        // the hash is only used to verify the proposal data, proposals are tracked by ID\\n        // so there is no need to hash with proposalCount nonce.\\n        bytes32 proposalHash = keccak256(abi.encode(targets, calldatas));\\n\\n        // get the quorum requirement for this proposal. The quorum requirement is equal to\\n        // the greatest quorum item in the proposal\\n        uint256 quorum;\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            // function selector should be the first 4 bytes of the calldata\\n            bytes4 selector = _getSelector(calldatas[i]);\\n            uint256 unitQuorum = _quorums[targets[i]][selector];\\n\\n            // don't assume baseQuorum is the highest\\n            unitQuorum = unitQuorum == 0 ? baseQuorum : unitQuorum;\\n            if (unitQuorum > quorum) {\\n                quorum = unitQuorum;\\n            }\\n        }\\n\\n        // We check that the expiration is possibly valid\\n        require(\\n            lastCall > block.number + lockDuration + extraVoteTime,\\n            \\\"expires before voting ends\\\"\\n        );\\n\\n        proposals[proposalCount] = Proposal(\\n            proposalHash,\\n            // Note we use blocknumber - 1 here as a flash loan mitigation.\\n            uint128(block.number - 1),\\n            uint128(block.number + lockDuration),\\n            uint128(block.number + lockDuration + extraVoteTime),\\n            uint128(quorum),\\n            proposals[proposalCount].votingPower,\\n            uint128(lastCall)\\n        );\\n\\n        uint256 votingPower = vote(\\n            votingVaults,\\n            extraVaultData,\\n            proposalCount,\\n            ballot\\n        );\\n\\n        // the proposal quorum is the lowest of minProposalPower and the proposal quorum\\n        // because it is awkward for the proposal to require more voting power than\\n        // the execution\\n        uint256 minPower = quorum <= minProposalPower\\n            ? quorum\\n            : minProposalPower;\\n        // the GSC (governance steering comity) contract does not have a voting power requirement\\n        // to submit a proposal\\n        if (!isAuthorized(msg.sender)) {\\n            require(votingPower >= minPower, \\\"insufficient voting power\\\");\\n        }\\n\\n        emit ProposalCreated(\\n            proposalCount,\\n            block.number,\\n            block.number + lockDuration,\\n            block.number + lockDuration + extraVoteTime\\n        );\\n\\n        proposalCount += 1;\\n    }\\n\\n    /// @notice Votes for a new proposal.\\n    /// @dev all provided votingVaults must be approved vaults `approvedVaults`.\\n    /// Addresses can re-vote, but the previous vote's effect will be negated.\\n    /// @param votingVaults voting vaults to draw voting power from.\\n    /// @param extraVaultData extra bytes data to give to each vault\\n    /// @param proposalId proposal identifier.\\n    /// @param ballot vote direction (yes, no, maybe)\\n    /// @return the user's voting power\\n    function vote(\\n        address[] memory votingVaults,\\n        bytes[] memory extraVaultData,\\n        uint256 proposalId,\\n        Ballot ballot\\n    ) public returns (uint256) {\\n        // No votes after the vote period is over\\n        require(proposals[proposalId].created != 0, \\\"proposal does not exist\\\");\\n        require(block.number <= proposals[proposalId].expiration, \\\"Expired\\\");\\n\\n        uint128 votingPower;\\n\\n        for (uint256 i = 0; i < votingVaults.length; i++) {\\n            // ensure there are no voting vault duplicates\\n            for (uint256 j = i + 1; j < votingVaults.length; j++) {\\n                require(votingVaults[i] != votingVaults[j], \\\"duplicate vault\\\");\\n            }\\n            require(approvedVaults[votingVaults[i]], \\\"unverified vault\\\");\\n            votingPower += uint128(\\n                IVotingVault(votingVaults[i]).queryVotePower(\\n                    msg.sender,\\n                    proposals[proposalId].created,\\n                    extraVaultData[i]\\n                )\\n            );\\n        }\\n\\n        // if a user has already voted, undo their previous vote.\\n        // NOTE: A new vote can have less voting power\\n        if (votes[msg.sender][proposalId].votingPower > 0) {\\n            proposals[proposalId].votingPower[\\n                uint256(votes[msg.sender][proposalId].castBallot)\\n            ] -= votes[msg.sender][proposalId].votingPower;\\n        }\\n        votes[msg.sender][proposalId] = Vote(votingPower, ballot);\\n\\n        proposals[proposalId].votingPower[uint256(ballot)] += votingPower;\\n\\n        // Emit an event to track this info\\n        emit Voted(msg.sender, proposalId, votes[msg.sender][proposalId]);\\n\\n        return votingPower;\\n    }\\n\\n    /// @notice Execute a proposal.\\n    /// @param proposalId proposal identifier.\\n    /// @param targets list of target addresses the timelock contract will interact with.\\n    /// @param calldatas execution calldata for each target.\\n    function execute(\\n        uint256 proposalId,\\n        address[] memory targets,\\n        bytes[] memory calldatas\\n    ) external nonReentrant {\\n        // We have to execute after min voting period\\n        require(block.number >= proposals[proposalId].unlock, \\\"not unlocked\\\");\\n        // If executed the proposal will be deleted and this will be zero\\n        require(proposals[proposalId].unlock != 0, \\\"Previously executed\\\");\\n        // We cannot execute if the proposal has expired\\n        require(\\n            block.number < proposals[proposalId].lastCall,\\n            \\\"past last call timestamp\\\"\\n        );\\n\\n        // ensure the data matches the hash\\n        require(\\n            keccak256(abi.encode(targets, calldatas)) ==\\n                proposals[proposalId].proposalHash,\\n            \\\"hash mismatch\\\"\\n        );\\n\\n        uint128[3] memory results = proposals[proposalId].votingPower;\\n        // if there are enough votes to meet quorum and there are more yes votes than no votes\\n        // then the proposal is executed\\n        bool passesQuorum = results[0] + results[1] + results[2] >=\\n            proposals[proposalId].quorum;\\n        bool majorityInFavor = results[0] > results[1];\\n\\n        require(passesQuorum && majorityInFavor, \\\"Cannot execute\\\");\\n\\n        // Execute a package of low level calls\\n        // NOTE - All of them must succeed for the package to succeed.\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            (bool success, ) = targets[i].call(calldatas[i]);\\n            require(success, \\\"Call failed\\\");\\n        }\\n        // Notification of proposal execution\\n        emit ProposalExecuted(proposalId);\\n\\n        // delete proposal for some gas savings,\\n        // Proposals are only deleted when they are actually executed, failed proposals\\n        // are never deleted\\n        delete proposals[proposalId];\\n    }\\n\\n    /// @notice gets the current voting power for a proposal\\n    /// @param proposalId The proposal's ID.\\n    function getProposalVotingPower(\\n        uint256 proposalId\\n    ) external view returns (uint128[3] memory) {\\n        return proposals[proposalId].votingPower;\\n    }\\n\\n    /// @notice Sets a quorum for a specific address and selector.\\n    /// @param target Target contract address.\\n    /// @param selector Function selector.\\n    /// @param quorum Fraction to set quorum to.\\n    function setCustomQuorum(\\n        address target,\\n        bytes4 selector,\\n        uint256 quorum\\n    ) external onlyOwner {\\n        _quorums[target][selector] = quorum;\\n    }\\n\\n    /// @notice Updates the status of a voting vault.\\n    /// @param vault Address of the voting vault.\\n    /// @param isValid True to be valid, false otherwise.\\n    function changeVaultStatus(address vault, bool isValid) external onlyOwner {\\n        approvedVaults[vault] = isValid;\\n    }\\n\\n    /// @notice Updates the default quorum.\\n    /// @param quorum New base quorum.\\n    function setDefaultQuorum(uint256 quorum) external onlyOwner {\\n        baseQuorum = quorum;\\n    }\\n\\n    /// @notice Updates the minimum voting power needed to submit a proposal.\\n    /// @param _minProposalPower Minimum voting power needed to submit a proposal.\\n    function setMinProposalPower(uint256 _minProposalPower) external onlyOwner {\\n        minProposalPower = _minProposalPower;\\n    }\\n\\n    /// @notice Updates the lock duration of a proposal.\\n    /// @param _lockDuration New lock duration.\\n    function setLockDuration(uint256 _lockDuration) external onlyOwner {\\n        lockDuration = _lockDuration;\\n    }\\n\\n    /// @notice Updates the extra voting period\\n    /// @param _extraVoteTime New extra voting time\\n    function changeExtraVotingTime(uint256 _extraVoteTime) external onlyOwner {\\n        extraVoteTime = _extraVoteTime;\\n    }\\n\\n    /// @notice Internal helper function to get the function selector of a calldata string.\\n    function _getSelector(\\n        bytes memory _calldata\\n    ) internal pure returns (bytes4 out) {\\n        assembly {\\n            out := and(\\n                mload(add(_calldata, 32)),\\n                0xFFFFFFFFF0000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe910c4dc2de450196c7ee1c4d83f94d7287d99399960fae6ad2f14807b1fab95\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICoreVoting.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\ninterface ICoreVoting {\\n    /// @notice A method auto generated from a public storage mapping, looks\\n    ///         up which vault addresses are approved by core voting\\n    /// @param vault the address to check if it is an approved vault\\n    /// @return true if approved false if not approved\\n    function approvedVaults(address vault) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3672d31a6af7cacc078648319990aa775f49015ee10f499a9af0ba30651693e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IVotingVault.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\ninterface IVotingVault {\\n    /// @notice Attempts to load the voting power of a user\\n    /// @param user The address we want to load the voting power of\\n    /// @param blockNumber the block number we want the user's voting power at\\n    /// @param extraData Abi encoded optional extra data used by some vaults, such as merkle proofs\\n    /// @return the number of votes\\n    function queryVotePower(\\n        address user,\\n        uint256 blockNumber,\\n        bytes calldata extraData\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xee4f5603f12cd949a90f5e16cfbcb6d6b6d3b0c1b351ce639885c231e4bcf389\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\ncontract Authorizable {\\n    // This contract allows a flexible authorization scheme\\n\\n    // The owner who can change authorization status\\n    address public owner;\\n    // A mapping from an address to its authorization status\\n    mapping(address => bool) public authorized;\\n\\n    /// @dev We set the deployer to the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev This modifier checks if the msg.sender is the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender not owner\\\");\\n        _;\\n    }\\n\\n    /// @dev This modifier checks if an address is authorized\\n    modifier onlyAuthorized() {\\n        require(isAuthorized(msg.sender), \\\"Sender not Authorized\\\");\\n        _;\\n    }\\n\\n    /// @dev Returns true if an address is authorized\\n    /// @param who the address to check\\n    /// @return true if authorized false if not\\n    function isAuthorized(address who) public view returns (bool) {\\n        return authorized[who];\\n    }\\n\\n    /// @dev Privileged function authorize an address\\n    /// @param who the address to authorize\\n    function authorize(address who) external onlyOwner {\\n        _authorize(who);\\n    }\\n\\n    /// @dev Privileged function to de authorize an address\\n    /// @param who The address to remove authorization from\\n    function deauthorize(address who) external onlyOwner {\\n        authorized[who] = false;\\n    }\\n\\n    /// @dev Function to change owner\\n    /// @param who The new owner address\\n    function setOwner(address who) public onlyOwner {\\n        owner = who;\\n    }\\n\\n    /// @dev Inheritable function which authorizes someone\\n    /// @param who the address to authorize\\n    function _authorize(address who) internal {\\n        authorized[who] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x83a121b68c4ca50dfe279f0ceaa262b7c75d56af4669723f4ca8e7bb3865278e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ReentrancyBlock.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\ncontract ReentrancyBlock {\\n    // A storage slot for the reentrancy flag\\n    bool private _entered;\\n    // Will use a state flag to prevent this function from being called back into\\n    modifier nonReentrant() {\\n        // Check the state variable before the call is entered\\n        require(!_entered, \\\"Reentrancy\\\");\\n        // Store that the function has been entered\\n        _entered = true;\\n        // Run the function code\\n        _;\\n        // Clear the state\\n        _entered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xef4d37e834e66e443a3cee98c38412d4cf9068630160c1c5c805b908281b4457\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080604052620000136119606003620001ae565b600455620000256119606005620001ae565b6005553480156200003557600080fd5b506040516200249338038062002493833981016040819052620000589162000203565b600080546001600160a01b03191633178155600385905560068490555b8151811015620000e1576001600960008484815181106200009a576200009a62000311565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000d88162000327565b91505062000075565b50620000ed8562000124565b62000119826001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b505050505062000345565b6000546001600160a01b03163314620001765760405162461bcd60e51b815260206004820152601060248201526f29b2b73232b9103737ba1037bbb732b960811b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620001cb57620001cb62000198565b500290565b80516001600160a01b0381168114620001e857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200021c57600080fd5b6200022786620001d0565b94506020808701519450604087015193506200024660608801620001d0565b60808801519093506001600160401b03808211156200026457600080fd5b818901915089601f8301126200027957600080fd5b8151818111156200028e576200028e620001ed565b8060051b604051601f19603f83011681018181108582111715620002b657620002b6620001ed565b60405291825284820192508381018501918c831115620002d557600080fd5b938501935b82851015620002fe57620002ee85620001d0565b84529385019392850192620002da565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200033e576200033e62000198565b5060010190565b61213e80620003556000396000f3fe608060405234801561001057600080fd5b506004361061016d5760003560e01c80639f2524ee116100ce578063bd9c75a511610087578063bd9c75a5146103d4578063c52ea3db146103e7578063d1b6762714610407578063d4b875671461041a578063da35c66414610423578063f131e5eb1461042c578063fe9fbb801461043557600080fd5b80639f2524ee14610301578063a4c950771461034f578063aa35fb5114610358578063af7a060c1461036b578063b6a5d7de1461039e578063b9181611146103b157600080fd5b806327c97fa51161012b57806327c97fa514610264578063341a7b42146102775780634392b99c1461028a5780634eb665af1461029d578063771a5323146102b05780637d5709eb146102c35780638da5cb5b146102d657600080fd5b806214d11d14610172578063013cf08b14610187578063045544431461021e57806313af40351461023557806315126a3d146102485780631c39c96c1461025b575b600080fd5b61018561018036600461176c565b610461565b005b6101db61019536600461176c565b600a60205260009081526040902080546001820154600283015460059093015491926001600160801b0380831693600160801b9384900482169383831693048216911686565b604080519687526001600160801b039586166020880152938516938601939093529083166060850152821660808401521660a082015260c0015b60405180910390f35b61022760045481565b604051908152602001610215565b6101856102433660046117a1565b610499565b610185610256366004611989565b6104e5565b61022760035481565b6101856102723660046117a1565b610972565b6101856102853660046119f5565b6109bd565b610185610298366004611a49565b610a12565b6101856102ab36600461176c565b610a6d565b6102276102be366004611a85565b610a9c565b6101856102d136600461176c565b610ae8565b6000546102e9906001600160a01b031681565b6040516001600160a01b039091168152602001610215565b61034161030f366004611ab8565b600b6020908152600092835260408084209091529082529020546001600160801b03811690600160801b900460ff1682565b604051610215929190611b1a565b61022760055481565b610227610366366004611b46565b610b17565b61038e6103793660046117a1565b60096020526000908152604090205460ff1681565b6040519015158152602001610215565b6101856103ac3660046117a1565b611052565b61038e6103bf3660046117a1565b60016020526000908152604090205460ff1681565b6101856103e2366004611c0e565b6110aa565b6103fa6103f536600461176c565b6115da565b6040516102159190611cea565b61018561041536600461176c565b611654565b61022760065481565b61022760075481565b61022761196081565b61038e6104433660046117a1565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031633146104945760405162461bcd60e51b815260040161048b90611d24565b60405180910390fd5b600555565b6000546001600160a01b031633146104c35760405162461bcd60e51b815260040161048b90611d24565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60025460ff16156105255760405162461bcd60e51b815260206004820152600a6024820152695265656e7472616e637960b01b604482015260640161048b565b6002805460ff191660019081179091556000848152600a6020526040902001546001600160801b03600160801b909104164310156105945760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081d5b9b1bd8dad95960a21b604482015260640161048b565b6000838152600a6020526040902060010154600160801b90046001600160801b03166105f85760405162461bcd60e51b8152602060048201526013602482015272141c995d9a5bdd5cdb1e48195e1958dd5d1959606a1b604482015260640161048b565b6000838152600a60205260409020600501546001600160801b0316431061065c5760405162461bcd60e51b8152602060048201526018602482015277070617374206c6173742063616c6c2074696d657374616d760441b604482015260640161048b565b6000838152600a602090815260409182902054915161067f918591859101611daa565b60405160208183030381529060405280519060200120146106d25760405162461bcd60e51b815260206004820152600d60248201526c0d0c2e6d040dad2e6dac2e8c6d609b1b604482015260640161048b565b6000838152600a60205260408082208151606081019283905291600391820191908285855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116106f7575050506000888152600a6020908152604080832060020154908701519187015187519798509296600160801b9091046001600160801b0316955090935061077e9250611e77565b6107889190611e77565b6001600160801b031610159050600082600160200201516001600160801b031683600060200201516001600160801b03161190508180156107c65750805b6108035760405162461bcd60e51b815260206004820152600e60248201526d43616e6e6f74206578656375746560901b604482015260640161048b565b60005b85518110156108ef57600086828151811061082357610823611e4b565b60200260200101516001600160a01b031686838151811061084657610846611e4b565b602002602001015160405161085b9190611ea2565b6000604051808303816000865af19150503d8060008114610898576040519150601f19603f3d011682016040523d82523d6000602084013e61089d565b606091505b50509050806108dc5760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b604482015260640161048b565b50806108e781611ebe565b915050610806565b506040518681527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9060200160405180910390a150505060009283525050600a6020526040812081815560018101829055600280820183905560038201839055600482019290925560050180546001600160801b0319169055805460ff19169055565b6000546001600160a01b0316331461099c5760405162461bcd60e51b815260040161048b90611d24565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b031633146109e75760405162461bcd60e51b815260040161048b90611d24565b6001600160a01b03919091166000908152600960205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314610a3c5760405162461bcd60e51b815260040161048b90611d24565b6001600160a01b0390921660009081526008602090815260408083206001600160e01b031990941683529290522055565b6000546001600160a01b03163314610a975760405162461bcd60e51b815260040161048b90611d24565b600455565b6001600160a01b03821660009081526008602090815260408083206001600160e01b03198516845290915281205480610ad9575050600354610ae2565b9050610ae2565b505b92915050565b6000546001600160a01b03163314610b125760405162461bcd60e51b815260040161048b90611d24565b600355565b6000828152600a60205260408120600101546001600160801b0316610b785760405162461bcd60e51b81526020600482015260176024820152761c1c9bdc1bdcd85b08191bd95cc81b9bdd08195e1a5cdd604a1b604482015260640161048b565b6000838152600a60205260409020600201546001600160801b0316431115610bcc5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015260640161048b565b6000805b8651811015610df3576000610be6826001611ed9565b90505b8751811015610c8a57878181518110610c0457610c04611e4b565b60200260200101516001600160a01b0316888381518110610c2757610c27611e4b565b60200260200101516001600160a01b03161415610c785760405162461bcd60e51b815260206004820152600f60248201526e191d5c1b1a58d85d19481d985d5b1d608a1b604482015260640161048b565b80610c8281611ebe565b915050610be9565b5060096000888381518110610ca157610ca1611e4b565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16610d075760405162461bcd60e51b815260206004820152601060248201526f1d5b9d995c9a599a5959081d985d5b1d60821b604482015260640161048b565b868181518110610d1957610d19611e4b565b60200260200101516001600160a01b031663e91f323533600a600089815260200190815260200160002060010160009054906101000a90046001600160801b0316898581518110610d6c57610d6c611e4b565b60200260200101516040518463ffffffff1660e01b8152600401610d9293929190611ef1565b6020604051808303816000875af1158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd59190611f2d565b610ddf9083611e77565b915080610deb81611ebe565b915050610bd0565b50336000908152600b602090815260408083208784529091529020546001600160801b031615610ed057336000908152600b6020908152604080832087845280835281842054600a845291909320929091526001600160801b0381169160030190600160801b900460ff166002811115610e6f57610e6f611ae2565b60038110610e7f57610e7f611e4b565b600291828204019190066010028282829054906101000a90046001600160801b0316610eab9190611f46565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6040518060400160405280826001600160801b03168152602001846002811115610efc57610efc611ae2565b9052336000908152600b602090815260408083208884528252909120825181546001600160801b039091166001600160801b031982168117835592840151919283916001600160881b03191617600160801b836002811115610f6057610f60611ae2565b021790555050506000848152600a602052604090208190600301846002811115610f8c57610f8c611ae2565b60038110610f9c57610f9c611e4b565b600291828204019190066010028282829054906101000a90046001600160801b0316610fc89190611e77565b82546001600160801b039182166101009390930a928302919092021990911617905550336000818152600b602090815260408083208884529091529081902090518692917f79597d31752b5a254be8f219c055ebfefe925e085d99c7b04b0883298b356951916110389190611f6e565b60405180910390a36001600160801b031695945050505050565b6000546001600160a01b0316331461107c5760405162461bcd60e51b815260040161048b90611d24565b6110a7816001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b50565b8483146110f15760405162461bcd60e51b81526020600482015260156024820152740c2e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b604482015260640161048b565b8461112f5760405162461bcd60e51b815260206004820152600e60248201526d195b5c1d1e481c1c9bdc1bdcd85b60921b604482015260640161048b565b6000868686866040516020016111489493929190611fbe565b60408051601f19818403018152919052805160209091012090506000805b878110156112665760006111d188888481811061118557611185611e4b565b9050602002810190611197919061209e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061168392505050565b90506000600860008c8c868181106111eb576111eb611e4b565b905060200201602081019061120091906117a1565b6001600160a01b03168152602080820192909252604090810160009081206001600160e01b0319861682529092529020549050801561123f5780611243565b6003545b905083811115611251578093505b5050808061125e90611ebe565b915050611166565b506005546004546112779043611ed9565b6112819190611ed9565b84116112cf5760405162461bcd60e51b815260206004820152601a60248201527f65787069726573206265666f726520766f74696e6720656e6473000000000000604482015260640161048b565b6040518060e001604052808381526020016001436112ed91906120e4565b6001600160801b03168152602001600454436113099190611ed9565b6001600160801b03168152602001600554600454436113289190611ed9565b6113329190611ed9565b6001600160801b03168152602001826001600160801b03168152602001600a600060075481526020019081526020016000206003016003806020026040519081016040528092919082600380156113d0576020028201916000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f0104928301926001038202915080841161138d5790505b50505091835250506001600160801b038681166020928301526007546000908152600a8352604090819020845181559284015190840151908216600160801b91831682021760018401556060840151608085015190831692160217600282015560a08201516114459060038084019190611694565b5060c08201518160050160006101000a8154816001600160801b0302191690836001600160801b0316021790555090505060006114c48d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506114bb92508e91508f90506120fb565b60075487610b17565b905060006006548311156114da576006546114dc565b825b3360009081526001602052604090205490915060ff1661154257808210156115425760405162461bcd60e51b815260206004820152601960248201527834b739bab33334b1b4b2b73a103b37ba34b733903837bbb2b960391b604482015260640161048b565b7fafbd5d299242bf861d198949ad835672e2e35b2e1838cee606a0b5aec2b4fa4260075443600454436115759190611ed9565b6005546004546115859043611ed9565b61158f9190611ed9565b60408051948552602085019390935291830152606082015260800160405180910390a16001600760008282546115c59190611ed9565b90915550505050505050505050505050505050565b6115e2611739565b6000828152600a60205260408082208151606081019283905292600391820192908390855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f01049283019260010382029150808411611607575094979650505050505050565b6000546001600160a01b0316331461167e5760405162461bcd60e51b815260040161048b90611d24565b600655565b602001516001600160dc1b03191690565b6002830191839082156117295791602002820160005b838211156116f457835183826101000a8154816001600160801b0302191690836001600160801b031602179055509260200192601001602081600f010492830192600103026116aa565b80156117275782816101000a8154906001600160801b030219169055601001602081600f010492830192600103026116f4565b505b50611735929150611757565b5090565b60405180606001604052806003906020820280368337509192915050565b5b808211156117355760008155600101611758565b60006020828403121561177e57600080fd5b5035919050565b80356001600160a01b038116811461179c57600080fd5b919050565b6000602082840312156117b357600080fd5b6117bc82611785565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611801576118016117c3565b604052919050565b60006001600160401b03821115611822576118226117c3565b5060051b60200190565b600082601f83011261183d57600080fd5b8135602061185261184d83611809565b6117d9565b82815260059290921b8401810191818101908684111561187157600080fd5b8286015b848110156118935761188681611785565b8352918301918301611875565b509695505050505050565b60006118ac61184d84611809565b8381529050602080820190600585901b8401868111156118cb57600080fd5b845b8181101561195e5780356001600160401b03808211156118ed5760008081fd5b8188019150601f8a818401126119035760008081fd5b823582811115611915576119156117c3565b611926818301601f191688016117d9565b92508083528b8782860101111561193f57600091508182fd5b80878501888501376000908301870152508552509282019282016118cd565b505050509392505050565b600082601f83011261197a57600080fd5b6117bc8383356020850161189e565b60008060006060848603121561199e57600080fd5b8335925060208401356001600160401b03808211156119bc57600080fd5b6119c88783880161182c565b935060408601359150808211156119de57600080fd5b506119eb86828701611969565b9150509250925092565b60008060408385031215611a0857600080fd5b611a1183611785565b915060208301358015158114611a2657600080fd5b809150509250929050565b80356001600160e01b03198116811461179c57600080fd5b600080600060608486031215611a5e57600080fd5b611a6784611785565b9250611a7560208501611a31565b9150604084013590509250925092565b60008060408385031215611a9857600080fd5b611aa183611785565b9150611aaf60208401611a31565b90509250929050565b60008060408385031215611acb57600080fd5b611ad483611785565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60038110611b1657634e487b7160e01b600052602160045260246000fd5b9052565b6001600160801b0383168152604081016117bc6020830184611af8565b80356003811061179c57600080fd5b60008060008060808587031215611b5c57600080fd5b84356001600160401b0380821115611b7357600080fd5b611b7f8883890161182c565b95506020870135915080821115611b9557600080fd5b50611ba287828801611969565b93505060408501359150611bb860608601611b37565b905092959194509250565b60008083601f840112611bd557600080fd5b5081356001600160401b03811115611bec57600080fd5b6020830191508360208260051b8501011115611c0757600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215611c2d57600080fd5b8a356001600160401b0380821115611c4457600080fd5b611c508e838f01611bc3565b909c509a5060208d0135915080821115611c6957600080fd5b611c758e838f01611bc3565b909a50985060408d0135915080821115611c8e57600080fd5b611c9a8e838f01611bc3565b909850965060608d0135915080821115611cb357600080fd5b50611cc08d828e01611bc3565b90955093505060808b01359150611cd960a08c01611b37565b90509295989b9194979a5092959850565b60608101818360005b6003811015611d1b5781516001600160801b0316835260209283019290910190600101611cf3565b50505092915050565b60208082526010908201526f29b2b73232b9103737ba1037bbb732b960811b604082015260600190565b60005b83811015611d69578181015183820152602001611d51565b83811115611d78576000848401525b50505050565b60008151808452611d96816020860160208601611d4e565b601f01601f19169290920160200192915050565b604080825283519082018190526000906020906060840190828701845b82811015611dec5781516001600160a01b031684529284019290840190600101611dc7565b50505083810382850152845180825282820190600581901b8301840187850160005b83811015611e3c57601f19868403018552611e2a838351611d7e565b94870194925090860190600101611e0e565b50909998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160801b03828116848216808303821115611e9957611e99611e61565b01949350505050565b60008251611eb4818460208701611d4e565b9190910192915050565b6000600019821415611ed257611ed2611e61565b5060010190565b60008219821115611eec57611eec611e61565b500190565b6001600160a01b03841681526001600160801b0383166020820152606060408201819052600090611f2490830184611d7e565b95945050505050565b600060208284031215611f3f57600080fd5b5051919050565b60006001600160801b0383811690831681811015611f6657611f66611e61565b039392505050565b81546001600160801b03811682526040820190610ae060208401608083901c60ff16611af8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040808252810184905260008560608301825b87811015611fff576001600160a01b03611fea84611785565b16825260209283019290910190600101611fd1565b506020915083810382850152808582528282019050828660051b8301018760005b8881101561208e57848303601f190184528135368b9003601e1901811261204657600080fd5b8a0180356001600160401b0381111561205e57600080fd5b8036038c131561206d57600080fd5b61207a85828a8501611f95565b958801959450505090850190600101612020565b50909a9950505050505050505050565b6000808335601e198436030181126120b557600080fd5b8301803591506001600160401b038211156120cf57600080fd5b602001915036819003821315611c0757600080fd5b6000828210156120f6576120f6611e61565b500390565b60006117bc36848461189e56fea2646970667358221220491a2369b6332e72f82de303d58cc5dd5e5a7dab48a0a411ffd9107080e2f4c464736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorize(address)": {
        "details": "Privileged function authorize an address",
        "params": {
          "who": "the address to authorize"
        }
      },
      "changeExtraVotingTime(uint256)": {
        "params": {
          "_extraVoteTime": "New extra voting time"
        }
      },
      "changeVaultStatus(address,bool)": {
        "params": {
          "isValid": "True to be valid, false otherwise.",
          "vault": "Address of the voting vault."
        }
      },
      "constructor": {
        "params": {
          "_baseQuorum": "Default quorum for all functions with no set quorum.",
          "_gsc": "governance steering committee contract.",
          "_minProposalPower": "Minimum voting power needed to submit a proposal.",
          "_timelock": "Timelock contract.",
          "votingVaults": "Initial voting vaults to approve."
        }
      },
      "deauthorize(address)": {
        "details": "Privileged function to de authorize an address",
        "params": {
          "who": "The address to remove authorization from"
        }
      },
      "execute(uint256,address[],bytes[])": {
        "params": {
          "calldatas": "execution calldata for each target.",
          "proposalId": "proposal identifier.",
          "targets": "list of target addresses the timelock contract will interact with."
        }
      },
      "getProposalVotingPower(uint256)": {
        "params": {
          "proposalId": "The proposal's ID."
        }
      },
      "isAuthorized(address)": {
        "details": "Returns true if an address is authorized",
        "params": {
          "who": "the address to check"
        },
        "returns": {
          "_0": "true if authorized false if not"
        }
      },
      "proposal(address[],bytes[],address[],bytes[],uint256,uint8)": {
        "details": "all provided votingVaults must be approved vaults `approvedVaults`.",
        "params": {
          "ballot": "vote direction (yes, no, maybe)",
          "calldatas": "execution calldata for each target.",
          "extraVaultData": "an encoded list of extra data to provide to vaults",
          "lastCall": "timestamp after which this cannot be executed, note should be                 more than the voting time period",
          "targets": "list of target addresses the timelock contract will interact with.",
          "votingVaults": "voting vaults to draw voting power from."
        }
      },
      "quorums(address,bytes4)": {
        "params": {
          "functionSelector": "the function which is callable",
          "target": "the contract for which the quorum is set"
        },
        "returns": {
          "_0": "The quorum needed to pass the function at this point in time"
        }
      },
      "setCustomQuorum(address,bytes4,uint256)": {
        "params": {
          "quorum": "Fraction to set quorum to.",
          "selector": "Function selector.",
          "target": "Target contract address."
        }
      },
      "setDefaultQuorum(uint256)": {
        "params": {
          "quorum": "New base quorum."
        }
      },
      "setLockDuration(uint256)": {
        "params": {
          "_lockDuration": "New lock duration."
        }
      },
      "setMinProposalPower(uint256)": {
        "params": {
          "_minProposalPower": "Minimum voting power needed to submit a proposal."
        }
      },
      "setOwner(address)": {
        "details": "Function to change owner",
        "params": {
          "who": "The new owner address"
        }
      },
      "vote(address[],bytes[],uint256,uint8)": {
        "details": "all provided votingVaults must be approved vaults `approvedVaults`. Addresses can re-vote, but the previous vote's effect will be negated.",
        "params": {
          "ballot": "vote direction (yes, no, maybe)",
          "extraVaultData": "extra bytes data to give to each vault",
          "proposalId": "proposal identifier.",
          "votingVaults": "voting vaults to draw voting power from."
        },
        "returns": {
          "_0": "the user's voting power"
        }
      }
    },
    "stateVariables": {
      "approvedVaults": {
        "params": {
          "vault": "the address to check if it is an approved vault"
        },
        "return": "true if approved false if not approved",
        "returns": {
          "_0": "true if approved false if not approved"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvedVaults(address)": {
        "notice": "A method auto generated from a public storage mapping, looks         up which vault addresses are approved by core voting"
      },
      "changeExtraVotingTime(uint256)": {
        "notice": "Updates the extra voting period"
      },
      "changeVaultStatus(address,bool)": {
        "notice": "Updates the status of a voting vault."
      },
      "constructor": {
        "notice": "constructor"
      },
      "execute(uint256,address[],bytes[])": {
        "notice": "Execute a proposal."
      },
      "getProposalVotingPower(uint256)": {
        "notice": "gets the current voting power for a proposal"
      },
      "proposal(address[],bytes[],address[],bytes[],uint256,uint8)": {
        "notice": "Create a new proposal"
      },
      "quorums(address,bytes4)": {
        "notice": "Override of the getter for the 'quorums' mapping which returns the default         quorum when the quorum is not set."
      },
      "setCustomQuorum(address,bytes4,uint256)": {
        "notice": "Sets a quorum for a specific address and selector."
      },
      "setDefaultQuorum(uint256)": {
        "notice": "Updates the default quorum."
      },
      "setLockDuration(uint256)": {
        "notice": "Updates the lock duration of a proposal."
      },
      "setMinProposalPower(uint256)": {
        "notice": "Updates the minimum voting power needed to submit a proposal."
      },
      "vote(address[],bytes[],uint256,uint8)": {
        "notice": "Votes for a new proposal."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3417,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3421,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "authorized",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4677,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "_entered",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1752,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "baseQuorum",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1760,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "lockDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1765,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "extraVoteTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1767,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "minProposalPower",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1769,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "proposalCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1775,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "_quorums",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))"
      },
      {
        "astId": 1809,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "approvedVaults",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1814,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "proposals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Proposal)1842_storage)"
      },
      {
        "astId": 1821,
        "contract": "contracts/CoreVoting.sol:CoreVoting",
        "label": "votes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)1848_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint128)3_storage": {
        "base": "t_uint128",
        "encoding": "inplace",
        "label": "uint128[3]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(Ballot)1825": {
        "encoding": "inplace",
        "label": "enum CoreVoting.Ballot",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)1848_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vote)1848_storage)"
      },
      "t_mapping(t_bytes4,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)1842_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreVoting.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)1842_storage"
      },
      "t_mapping(t_uint256,t_struct(Vote)1848_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreVoting.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)1848_storage"
      },
      "t_struct(Proposal)1842_storage": {
        "encoding": "inplace",
        "label": "struct CoreVoting.Proposal",
        "members": [
          {
            "astId": 1827,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "proposalHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1829,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1831,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "unlock",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1833,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "expiration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 1835,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "quorum",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 1839,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "votingPower",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint128)3_storage"
          },
          {
            "astId": 1841,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "lastCall",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Vote)1848_storage": {
        "encoding": "inplace",
        "label": "struct CoreVoting.Vote",
        "members": [
          {
            "astId": 1844,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "votingPower",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1847,
            "contract": "contracts/CoreVoting.sol:CoreVoting",
            "label": "castBallot",
            "offset": 16,
            "slot": "0",
            "type": "t_enum(Ballot)1825"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}