{
  "address": "0x544F7e8dBDB6f5C58B2a84f2999EC73a460A123D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "deauthorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "genericCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "sendFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd014263eeeeca3a70df0ea80ede86c3a75cc58f85f840b060181dfa8e68d20e9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x544F7e8dBDB6f5C58B2a84f2999EC73a460A123D",
    "transactionIndex": 0,
    "gasUsed": "461076",
    "logsBloom": "0x
    "blockHash": "0x335a0403df34c9f7c2520b07f60481111d629b883657cb1b1057fc50398efc5b",
    "transactionHash": "0xd014263eeeeca3a70df0ea80ede86c3a75cc58f85f840b060181dfa8e68d20e9",
    "logs": [],
    "blockNumber": 9234565,
    "cumulativeGasUsed": "461076",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x427d1b73d94BAb4C0D8b2EE244c83c3aEb76bC72"
  ],
  "numDeployments": 1,
  "solcInputHash": "de8a9e6671cf44320fb449edaa342a2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"genericCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"sendFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of the allowance.\",\"_spender\":\"The recipient of the allowance.\",\"_token\":\"The ERC20 token address.\"}},\"authorize(address)\":{\"details\":\"Privileged function authorize an address\",\"params\":{\"who\":\"the address to authorize\"}},\"constructor\":{\"params\":{\"__governance\":\"Governance contract address.\"}},\"deauthorize(address)\":{\"details\":\"Privileged function to de authorize an address\",\"params\":{\"who\":\"The address to remove authorization from\"}},\"genericCall(address,bytes)\":{\"params\":{\"_callData\":\"The execution calldata to pass.\",\"_target\":\"The target address where the call will be performed.\"}},\"isAuthorized(address)\":{\"details\":\"Returns true if an address is authorized\",\"params\":{\"who\":\"the address to check\"},\"returns\":{\"_0\":\"true if authorized false if not\"}},\"sendFunds(address,uint256,address)\":{\"params\":{\"_amount\":\"The amount of ETH or ERC20 to send.\",\"_recipient\":\"The recipient of this value.\",\"_token\":\"Either (1) An ERC20 token address or (2) the _ETH_CONSTANT to use transfer ETH.\"}},\"setOwner(address)\":{\"details\":\"Function to change owner\",\"params\":{\"who\":\"The new owner address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,uint256)\":{\"notice\":\"Sets an ERC20 allowance from this contract to a _spender.\"},\"constructor\":{\"notice\":\"constructor.\"},\"genericCall(address,bytes)\":{\"notice\":\"Performs a generic call from this contract.\"},\"sendFunds(address,uint256,address)\":{\"notice\":\"Sends funds from the treasury to an address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/features/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/features/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport \\\"../libraries/Authorizable.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// This contract is designed to hold the erc20 and eth reserves of the dao\\n// and will likely control a large amount of funds. It is designed to be\\n// flexible, secure and simple\\ncontract Treasury is Authorizable {\\n    // A constant which represents ether\\n    address internal constant _ETH_CONSTANT =\\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /// @notice constructor.\\n    /// @param __governance Governance contract address.\\n    constructor(address __governance) {\\n        setOwner(__governance);\\n    }\\n\\n    ///@notice Sends funds from the treasury to an address.\\n    ///@param _token Either (1) An ERC20 token address\\n    /// or (2) the _ETH_CONSTANT to use transfer ETH.\\n    ///@param _amount The amount of ETH or ERC20 to send.\\n    ///@param _recipient The recipient of this value.\\n    function sendFunds(\\n        address _token,\\n        uint256 _amount,\\n        address _recipient\\n    ) external onlyOwner {\\n        if (_token == _ETH_CONSTANT) {\\n            payable(_recipient).transfer(_amount);\\n        } else {\\n            // onlyGovernance should protect from reentrancy\\n            IERC20(_token).transfer(_recipient, _amount);\\n        }\\n    }\\n\\n    ///@notice Sets an ERC20 allowance from this contract to a _spender.\\n    ///@param _token The ERC20 token address.\\n    ///@param _spender The recipient of the allowance.\\n    ///@param _amount The amount of the allowance.\\n    function approve(\\n        address _token,\\n        address _spender,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    ///@notice Performs a generic call from this contract.\\n    ///@param _target The target address where the call will be performed.\\n    ///@param _callData The execution calldata to pass.\\n    function genericCall(\\n        address _target,\\n        bytes calldata _callData\\n    ) external onlyOwner {\\n        // We do a low level call and insist it succeeds\\n        (bool status, ) = _target.call(_callData);\\n        require(status, \\\"Call failed\\\");\\n    }\\n\\n    // Receive is fine because we don't want to execute code\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xcae9ff88aa3ae726d39141b822d9aaaf52d4e510b4c64de21b61c6379be97ba1\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Note this is non standard but nearly all ERC20 have exposed decimal functions\\n    function decimals() external view returns (uint8);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x18060ccebc31bddae9913849a36d44f7310268020741ff958afb6e1d97086404\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\ncontract Authorizable {\\n    // This contract allows a flexible authorization scheme\\n\\n    // The owner who can change authorization status\\n    address public owner;\\n    // A mapping from an address to its authorization status\\n    mapping(address => bool) public authorized;\\n\\n    /// @dev We set the deployer to the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev This modifier checks if the msg.sender is the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender not owner\\\");\\n        _;\\n    }\\n\\n    /// @dev This modifier checks if an address is authorized\\n    modifier onlyAuthorized() {\\n        require(isAuthorized(msg.sender), \\\"Sender not Authorized\\\");\\n        _;\\n    }\\n\\n    /// @dev Returns true if an address is authorized\\n    /// @param who the address to check\\n    /// @return true if authorized false if not\\n    function isAuthorized(address who) public view returns (bool) {\\n        return authorized[who];\\n    }\\n\\n    /// @dev Privileged function authorize an address\\n    /// @param who the address to authorize\\n    function authorize(address who) external onlyOwner {\\n        _authorize(who);\\n    }\\n\\n    /// @dev Privileged function to de authorize an address\\n    /// @param who The address to remove authorization from\\n    function deauthorize(address who) external onlyOwner {\\n        authorized[who] = false;\\n    }\\n\\n    /// @dev Function to change owner\\n    /// @param who The new owner address\\n    function setOwner(address who) public onlyOwner {\\n        owner = who;\\n    }\\n\\n    /// @dev Inheritable function which authorizes someone\\n    /// @param who the address to authorize\\n    function _authorize(address who) internal {\\n        authorized[who] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x83a121b68c4ca50dfe279f0ceaa262b7c75d56af4669723f4ca8e7bb3865278e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516107e83803806107e883398101604081905261002f916100c3565b600080546001600160a01b0319163317905561004a81610050565b506100f3565b6000546001600160a01b031633146100a15760405162461bcd60e51b815260206004820152601060248201526f29b2b73232b9103737ba1037bbb732b960811b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156100d557600080fd5b81516001600160a01b03811681146100ec57600080fd5b9392505050565b6106e6806101026000396000f3fe60806040526004361061007a5760003560e01c806313af40351461008657806327c97fa5146100a85780634650c308146100c85780638522d1b2146100e85780638da5cb5b14610108578063b6a5d7de14610145578063b918161114610165578063e1f21c67146101a5578063fe9fbb80146101c557600080fd5b3661008157005b600080fd5b34801561009257600080fd5b506100a66100a1366004610537565b6101fe565b005b3480156100b457600080fd5b506100a66100c3366004610537565b610253565b3480156100d457600080fd5b506100a66100e3366004610559565b61029e565b3480156100f457600080fd5b506100a66101033660046105dc565b61036b565b34801561011457600080fd5b50600054610128906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015157600080fd5b506100a6610160366004610537565b610464565b34801561017157600080fd5b50610195610180366004610537565b60016020526000908152604090205460ff1681565b604051901515815260200161013c565b3480156101b157600080fd5b506100a66101c0366004610618565b6104bc565b3480156101d157600080fd5b506101956101e0366004610537565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031633146102315760405162461bcd60e51b815260040161022890610654565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461027d5760405162461bcd60e51b815260040161022890610654565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b031633146102c85760405162461bcd60e51b815260040161022890610654565b6000836001600160a01b031683836040516102e492919061067e565b6000604051808303816000865af19150503d8060008114610321576040519150601f19603f3d011682016040523d82523d6000602084013e610326565b606091505b50509050806103655760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152606401610228565b50505050565b6000546001600160a01b031633146103955760405162461bcd60e51b815260040161022890610654565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156103f0576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610365573d6000803e3d6000fd5b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044015b6020604051808303816000875af1158015610440573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610365919061068e565b6000546001600160a01b0316331461048e5760405162461bcd60e51b815260040161022890610654565b6104b9816001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b50565b6000546001600160a01b031633146104e65760405162461bcd60e51b815260040161022890610654565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b390604401610421565b80356001600160a01b038116811461053257600080fd5b919050565b60006020828403121561054957600080fd5b6105528261051b565b9392505050565b60008060006040848603121561056e57600080fd5b6105778461051b565b9250602084013567ffffffffffffffff8082111561059457600080fd5b818601915086601f8301126105a857600080fd5b8135818111156105b757600080fd5b8760208285010111156105c957600080fd5b6020830194508093505050509250925092565b6000806000606084860312156105f157600080fd5b6105fa8461051b565b92506020840135915061060f6040850161051b565b90509250925092565b60008060006060848603121561062d57600080fd5b6106368461051b565b92506106446020850161051b565b9150604084013590509250925092565b60208082526010908201526f29b2b73232b9103737ba1037bbb732b960811b604082015260600190565b8183823760009101908152919050565b6000602082840312156106a057600080fd5b8151801515811461055257600080fdfea2646970667358221220d7613056509df9527276d83d962f79b9afe4c235f4700259cced8273df4d998f64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061007a5760003560e01c806313af40351461008657806327c97fa5146100a85780634650c308146100c85780638522d1b2146100e85780638da5cb5b14610108578063b6a5d7de14610145578063b918161114610165578063e1f21c67146101a5578063fe9fbb80146101c557600080fd5b3661008157005b600080fd5b34801561009257600080fd5b506100a66100a1366004610537565b6101fe565b005b3480156100b457600080fd5b506100a66100c3366004610537565b610253565b3480156100d457600080fd5b506100a66100e3366004610559565b61029e565b3480156100f457600080fd5b506100a66101033660046105dc565b61036b565b34801561011457600080fd5b50600054610128906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015157600080fd5b506100a6610160366004610537565b610464565b34801561017157600080fd5b50610195610180366004610537565b60016020526000908152604090205460ff1681565b604051901515815260200161013c565b3480156101b157600080fd5b506100a66101c0366004610618565b6104bc565b3480156101d157600080fd5b506101956101e0366004610537565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031633146102315760405162461bcd60e51b815260040161022890610654565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461027d5760405162461bcd60e51b815260040161022890610654565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b031633146102c85760405162461bcd60e51b815260040161022890610654565b6000836001600160a01b031683836040516102e492919061067e565b6000604051808303816000865af19150503d8060008114610321576040519150601f19603f3d011682016040523d82523d6000602084013e610326565b606091505b50509050806103655760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152606401610228565b50505050565b6000546001600160a01b031633146103955760405162461bcd60e51b815260040161022890610654565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156103f0576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610365573d6000803e3d6000fd5b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044015b6020604051808303816000875af1158015610440573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610365919061068e565b6000546001600160a01b0316331461048e5760405162461bcd60e51b815260040161022890610654565b6104b9816001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b50565b6000546001600160a01b031633146104e65760405162461bcd60e51b815260040161022890610654565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b390604401610421565b80356001600160a01b038116811461053257600080fd5b919050565b60006020828403121561054957600080fd5b6105528261051b565b9392505050565b60008060006040848603121561056e57600080fd5b6105778461051b565b9250602084013567ffffffffffffffff8082111561059457600080fd5b818601915086601f8301126105a857600080fd5b8135818111156105b757600080fd5b8760208285010111156105c957600080fd5b6020830194508093505050509250925092565b6000806000606084860312156105f157600080fd5b6105fa8461051b565b92506020840135915061060f6040850161051b565b90509250925092565b60008060006060848603121561062d57600080fd5b6106368461051b565b92506106446020850161051b565b9150604084013590509250925092565b60208082526010908201526f29b2b73232b9103737ba1037bbb732b960811b604082015260600190565b8183823760009101908152919050565b6000602082840312156106a057600080fd5b8151801515811461055257600080fdfea2646970667358221220d7613056509df9527276d83d962f79b9afe4c235f4700259cced8273df4d998f64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,address,uint256)": {
        "params": {
          "_amount": "The amount of the allowance.",
          "_spender": "The recipient of the allowance.",
          "_token": "The ERC20 token address."
        }
      },
      "authorize(address)": {
        "details": "Privileged function authorize an address",
        "params": {
          "who": "the address to authorize"
        }
      },
      "constructor": {
        "params": {
          "__governance": "Governance contract address."
        }
      },
      "deauthorize(address)": {
        "details": "Privileged function to de authorize an address",
        "params": {
          "who": "The address to remove authorization from"
        }
      },
      "genericCall(address,bytes)": {
        "params": {
          "_callData": "The execution calldata to pass.",
          "_target": "The target address where the call will be performed."
        }
      },
      "isAuthorized(address)": {
        "details": "Returns true if an address is authorized",
        "params": {
          "who": "the address to check"
        },
        "returns": {
          "_0": "true if authorized false if not"
        }
      },
      "sendFunds(address,uint256,address)": {
        "params": {
          "_amount": "The amount of ETH or ERC20 to send.",
          "_recipient": "The recipient of this value.",
          "_token": "Either (1) An ERC20 token address or (2) the _ETH_CONSTANT to use transfer ETH."
        }
      },
      "setOwner(address)": {
        "details": "Function to change owner",
        "params": {
          "who": "The new owner address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address,uint256)": {
        "notice": "Sets an ERC20 allowance from this contract to a _spender."
      },
      "constructor": {
        "notice": "constructor."
      },
      "genericCall(address,bytes)": {
        "notice": "Performs a generic call from this contract."
      },
      "sendFunds(address,uint256,address)": {
        "notice": "Sends funds from the treasury to an address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3405,
        "contract": "contracts/features/Treasury.sol:Treasury",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3409,
        "contract": "contracts/features/Treasury.sol:Treasury",
        "label": "authorized",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}